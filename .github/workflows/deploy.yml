name: CI/CD for Bedrock

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: composer
          - name: sage-theme
          - name: plugins
    
    steps:
      - uses: actions/checkout@v4
        with: 
          submodules: recursive
          fetch-depth: 0

      # ==================== COMPOSER BUILD ====================
      - name: Setup PHP
        if: matrix.name == 'composer'
        uses: shivammathur/setup-php@v2
        with: 
          php-version: '8.2'
          tools: composer
          coverage: none

      - name: Cache Composer dependencies
        if: matrix.name == 'composer'
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-

      - name: Install Composer dependencies
        if: matrix.name == 'composer'
        run: composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

      - name: Upload Composer artifacts
        if: matrix.name == 'composer'
        uses: actions/upload-artifact@v4
        with:
          name: vendor
          path: vendor/
          retention-days: 1

      # ==================== SAGE THEME BUILD ====================
      - name: Setup Node.js for Sage
        if: matrix.name == 'sage-theme'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Sage npm dependencies
        if: matrix.name == 'sage-theme'
        uses: actions/cache@v3
        with:
          path: |
            web/app/themes/sage/node_modules
            ~/.npm
          key: sage-npm-${{ hashFiles('**/web/app/themes/sage/package.json') }}
          restore-keys: |
            sage-npm-

      - name: Build Sage theme assets
        if: matrix.name == 'sage-theme'
        run: |
          cd web/app/themes/sage
          npm install
          npm run build

      - name: Upload Sage build artifacts
        if: matrix.name == 'sage-theme'
        uses: actions/upload-artifact@v4
        with:
          name: sage-dist
          path: web/app/themes/sage/public/
          retention-days: 1

      # ==================== PLUGIN BUILDS ====================
      - name: Setup Node.js for plugins
        if: matrix.name == 'plugins'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build plugin assets
        if: matrix.name == 'plugins'
        run: echo "No plugin builds required currently"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v4
        with: 
          submodules: recursive

      - name: Download Composer artifacts
        uses: actions/download-artifact@v4
        with:
          name: vendor
          path: vendor/

      - name: Download Sage build artifacts
        uses: actions/download-artifact@v4
        with:
          name: sage-dist
          path: web/app/themes/sage/public/

      - name: Create backup marker
        id: backup
        run: echo "DEPLOY_TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "${{ secrets.VM_HOST }}" >> ~/.ssh/known_hosts

      - name: Create backup on VM
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} <<'SSH'
          set -e
          cd "${{ secrets.VM_PATH }}"
          if [ -d "web" ]; then
            sudo cp -r "${{ secrets.VM_PATH }}" "${{ secrets.VM_PATH }}_backup_$(date +%Y%m%d_%H%M%S)"
            echo "✅ Backup created"
          fi
          SSH

      - name: Rsync to VM
        run: |
          rsync -az --delete \
            --exclude=".git/" \
            --exclude=".github/" \
            --exclude=".env" \
            --exclude="web/app/uploads/" \
            --exclude="node_modules/" \
            -e "ssh -i ~/.ssh/id_ed25519" \
            ./ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ secrets.VM_PATH }}/

      - name: Post-deploy finalize
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} <<'SSH'
          set -e
          cd "${{ secrets.VM_PATH }}"
          sudo chown -R www-data:www-data "${{ secrets.VM_PATH }}"
          sudo chmod -R 755 "${{ secrets.VM_PATH }}"
          sudo chmod -R 775 "${{ secrets.VM_PATH }}/web/app/uploads"
          sudo systemctl reload php8.2-fpm || sudo systemctl restart php8.2-fpm
          sudo systemctl reload nginx || sudo systemctl restart nginx
          echo "✅ Deployment finalized"
          SSH

      - name: Health check
        run: |
          sleep 5
          HTTP_CODE=$(curl -o /dev/null -s -w "%{http_code}" "http://${{ secrets.VM_HOST }}/")
          echo "HTTP Status: $HTTP_CODE"
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "❌ Health check failed"
            exit 1
          fi
          echo "✅ WordPress is responding"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "🔄 Initiating rollback..."
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} <<'SSH'
          BACKUP_DIR=$(ls -dt ${{ secrets.VM_PATH }}_backup_* 2>/dev/null | head -n 1)
          if [ -n "$BACKUP_DIR" ]; then
            sudo rm -rf "${{ secrets.VM_PATH }}"
            sudo mv "$BACKUP_DIR" "${{ secrets.VM_PATH }}"
            sudo chown -R www-data:www-data "${{ secrets.VM_PATH }}"
            sudo systemctl reload php8.2-fpm
            sudo systemctl reload nginx
            echo "✅ Rollback completed"
          fi
          SSH

      - name: Cleanup old backups
        if: success()
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} <<'SSH'
          cd $(dirname "${{ secrets.VM_PATH }}")
          ls -dt ${{ secrets.VM_PATH }}_backup_* 2>/dev/null | tail -n +4 | xargs -r sudo rm -rf
          echo "✅ Cleaned up old backups"
          SSH
